import { useEffect, useState } from 'react'
import Head from 'next/head'

/**
 * Helper function
 * Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
 *
 * @param base64
 * @returns {Uint8Array}
 */
const urlBase64ToUint8Array = base64 => {
  const padding = '='.repeat((4 - (base64.length % 4)) % 4)
  const b64 = (base64 + padding).replace(/-/g, '+').replace(/_/g, '/')

  const rawData = window.atob(b64)
  const outputArray = new Uint8Array(rawData.length)

  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i)
  }
  return outputArray
}

export default () => {
  const [isSubscribed, setIsSubscribed] = useState(false)
  const [subscription, setSubscription] = useState(null)
  const [registration, setRegistration] = useState(null)

  useEffect(() => {
    if (typeof window !== 'undefined' && 'serviceWorker' in navigator && window.workbox !== undefined) {
      // run only in browser
      navigator.serviceWorker.ready.then(registration => {
        setRegistration(registration);

        return registration.pushManager.getSubscription().then(async (subscription) => {
          // If a subscription was found, return it.
          console.log('blah 0')
          if (subscription) {
            console.log('blah 1')
            console.log(subscription);
            return subscription;
          }

          console.log('blah 1.1')

          // Get the server's public key
          const response = await fetch('./api/vapidPublicKey');
          const vapidPublicKey = await response.text();
          // Chrome doesn't accept the base64-encoded (string) vapidPublicKey yet
          // urlBase64ToUint8Array() is defined in /tools.js
          const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);

          // Otherwise, subscribe the user (userVisibleOnly allows to specify that we don't plan to
          // send notifications that don't have a visible effect for the user).
          return registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: convertedVapidKey
          });
        });
      }).then(subscription => {  // Send the subscription details to the server using the Fetch API.

        console.log('blah 2')
        console.log(subscription);


        setSubscription(subscription);
        setIsSubscribed(true);

        fetch('./api/register', {
          method: 'post',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            subscription: subscription
          }),
        });

        document.getElementById('doIt').onclick = function () {
          const payload = document.getElementById('notification-payload').value;
          const delay = document.getElementById('notification-delay').value;
          const ttl = document.getElementById('notification-ttl').value;

          // Ask the server to send the client a notification (for testing purposes, in actual
          // applications the push notification is likely going to be generated by some event
          // in the server).
          fetch('./api/sendNotification', {
            method: 'post',
            headers: {
              'Content-type': 'application/json'
            },
            body: JSON.stringify({
              subscription: subscription,
              payload: payload,
              delay: delay,
              ttl: ttl,
            }),
          });
        }
      })
    }
  }, [])

  return (
      <>
        <Head>
          <title>next-pwa example</title>
        </Head>
        <p>This demo shows how to send push notifications with a payload.</p>

        <form>
          Notification payload: <input id='notification-payload' type='text' defaultValue='Insert a message'></input>
          Notification delay: <input id='notification-delay' type='number' defaultValue='5'></input> seconds
          Notification Time-To-Live: <input id='notification-ttl' type='number' defaultValue='0'></input> seconds
        </form>

        <button id="doIt">Request sending a notification!</button>
      </>
  )
}
